package it.popso.bicomp.utils;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.times;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoSettings;
import org.mockito.quality.Strictness;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import it.popso.bicomp.exception.FileManagerException;
import it.popso.bicomp.flat.PsrFileHeader;
import it.popso.bicomp.flat.PsrParticipantBody;
import it.popso.bicomp.flat.PsrParticipantHeader;
import it.popso.bicomp.flat.PsrSettlementBicHeader;


@ExtendWith(SpringExtension.class)
@MockitoSettings(strictness = Strictness.LENIENT)
@TestMethodOrder(OrderAnnotation.class)
public class FileManagerTest {
	
	private FileManager fileManager;
	private MockedStatic<IOUtils> mockIOUtils;
	
	@BeforeEach
	public void setup() throws IOException {
		this.fileManager = FileManager.fileManager();
		
		this.mockIOUtils = Mockito.mockStatic(IOUtils.class);
	}
	
	@Test
	@Order(1)
	void testParseHpsr() throws FileManagerException {
				
		PsrFileHeader p = this.fileManager.parseHpsr("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR");
		
		assertThat(p).isNotNull();
		assertThat(p.getRecordType()).isEqualTo("HPSR");
		assertThat(p.getServiceIdentifier()).isEqualTo("SCI");
		assertThat(p.getFileType()).isEqualTo("PSR");
	}
	
	@Test
	@Order(2)
	void testParseHpsrFileManagerExceptionHpsr() throws FileManagerException {
		
		assertThrows(FileManagerException.class, () -> {
			this.fileManager.parseHpsr("HPSRHPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR");
		});
	}
	
	@Test
	@Order(3)
	void testParseHpsrFileManagerExceptionTpsr() throws FileManagerException {
				
		assertThrows(FileManagerException.class, () -> {
			this.fileManager.parseHpsr("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSRTPSR");
		});
	}
	
	@Test
	@Order(4)
	void testParsePsbh() throws FileManagerException {
				
		PsrSettlementBicHeader p = this.fileManager.parsePsbh("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR", 69);
		
		assertThat(p).isNotNull();
		assertThat(p.getRecordType()).isEqualTo("PSBH");
		assertThat(p.getInitialPositionIndicator()).isEqualTo("CR");
	}
	
	@Test
	@Order(5)
	void testParsePsbhFileManagerExceptionPsbh() throws FileManagerException {
		
		assertThrows(FileManagerException.class, () -> {
			this.fileManager.parsePsbh("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR", 69);
		});
	}
	
	@Test
	@Order(6)
	void testParsePsbhFileManagerExceptionPsbt() throws FileManagerException {
				
		assertThrows(FileManagerException.class, () -> {
			this.fileManager.parsePsbh("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTPSBTTPSR", 69);
		});
	}
	
	@SuppressWarnings("unchecked")
	@Test
	@Order(7)
	void testParsePdphOnePdphOnePdpb() throws FileManagerException {
		
		Object[] o = this.fileManager.parsePdph("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR", 124);
		
		assertThat(o).isNotEmpty();
		assertThat((List<PsrParticipantHeader>)o[0]).hasSize(1);
		assertThat((List<PsrParticipantBody>)o[1]).hasSize(1);
	}
	
	@Test
	@Order(8)
	void testParsePdphNoPdph() throws FileManagerException {
		
		assertThrows(FileManagerException.class, () -> {
			this.fileManager.parsePdph("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92POSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR", 124);
		});
	}
	
	@Test
	@Order(9)
	void testParsePdphNoPdpt() throws FileManagerException {
		
		assertThrows(FileManagerException.class, () -> {
			this.fileManager.parsePdph("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000014000000,50CR000000013000000,92PDPHPOSOIT22CR000000017000000,50CR000000015000000,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz912345000000004831171,23STDPSBTTPSR", 124);
		});
	}
	
	@SuppressWarnings("unchecked")
	@Test
	@Order(10)
	void testParsePdphOnePdphNoPdpb() throws FileManagerException {
		
		Object[] o = this.fileManager.parsePdph("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPTPSBTTPSR", 124);
		
		assertThat(o).isNotEmpty();
		assertThat((List<PsrParticipantHeader>)o[0]).hasSize(1);
		assertThat((List<PsrParticipantBody>)o[1]).isEmpty();
	}
	
	@SuppressWarnings("unchecked")
	@Test
	@Order(11)
	void testParsePdphOnePdphMultiplePdpb() throws FileManagerException {
		
		Object[] o = this.fileManager.parsePdph("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR", 124);
		
		assertThat(o).isNotEmpty();
		assertThat((List<PsrParticipantHeader>)o[0]).hasSize(1);
		assertThat((List<PsrParticipantBody>)o[1]).hasSize(2);
	}
	
	@SuppressWarnings("unchecked")
	@Test
	@Order(12)
	void testParsePdphMultiplePdphMultiplePdpb() throws FileManagerException {
		
		Object[] o = this.fileManager.parsePdph("HPSRSCIPSRIPSTFRPPPSCI230627000214230627130230PPOSOIT2223062703000007PSBHPOSOIT22XXXCR000000016533447,50CR000000012926545,92PDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz954321000000004831171,23STDPDPTPDPHPOSOIT22CR000000016533447,50CR000000012926545,92000000000000000,00000000000000000,00000000004831171,23000000000000000,00000000000000000,00000000000000000,00000000000065399,16000000001289668,81000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00000000000000000,00PDPBCLRRIPSTFRPP0627l9LmlqeCR72qslKtz9Aeuou000000004831171,23STDPDPTPSBTTPSR", 124);
		
		assertThat(o).isNotEmpty();
		assertThat((List<PsrParticipantHeader>)o[0]).hasSize(2);
		assertThat((List<PsrParticipantBody>)o[1]).hasSize(3);
	}
	
	@Test
	@Order(13)
	void testGetPsrString() throws IOException, FileManagerException {
		
		InputStream inputStream = new FileInputStream(new File("src/test/resources/rt1/RT02SCIPOSOIT22.P"));
		
		List<String> list = Arrays.asList("First line");
		Mockito.when(IOUtils.readLines(Mockito.any(InputStream.class), Mockito.any(Charset.class))).thenReturn(list);
		
		String result = this.fileManager.getPsrString(inputStream);
		
		assertThat(result).isNotNull();
		this.mockIOUtils.verify(() -> IOUtils.readLines(Mockito.any(InputStream.class), Mockito.any(Charset.class)), times(1));
	}
	
	@Test
	@Order(14)
	void testGetPsrStringFileManagerException() throws FileManagerException, FileNotFoundException {
		
		InputStream inputStream = new FileInputStream(new File("src/test/resources/rt1/RT02SCIPOSOIT22.P"));
		
		List<String> list = Arrays.asList("First line", "Second line");
		Mockito.when(IOUtils.readLines(Mockito.any(InputStream.class), Mockito.any(Charset.class))).thenReturn(list);
		
		assertThrows(FileManagerException.class, () -> {
			this.fileManager.getPsrString(inputStream);
		});
		
		this.mockIOUtils.verify(() -> IOUtils.readLines(Mockito.any(InputStream.class), Mockito.any(Charset.class)), times(1));
	}
	
	@AfterEach
	public void cleanUp() {
		this.mockIOUtils.close();
	}

}
